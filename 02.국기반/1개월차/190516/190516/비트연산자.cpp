#include <iostream>
using namespace std;

void main()
{
	// ##1. 8진수 , 16진수
	// int dec = 10;	// 10진수 
	// int oc = 012;	// 8진수  3 비트

	// 0 ~ 9 는 자연수, 10 ~ 15는 A ~ F로 표기.
	// int hex = 0xA;	// 16진수 4 비트

	// cout << dec << endl;	
	// cout << oc  << endl;	
	// cout << hex << endl;	


	// ##2. 비트단위 논리 연산자 (and, or, not , xor)
	// 정수 자료형에만 사용할 수 있는 연산자다.

	// & (비트단위 and 연산자)
	// 비교하는 두 비트가 모두 1이면 결과는 1, 하나라도 0이면 결과는 0.
	// short a = 10;	// 0000 0000 0000 1010
	// short b = 6;		// 0000 0000 0000 0110
	// ----------------------------------------
	// short c = a & b;	// 0000 0000 0000 0010

	// cout << c << endl;

	// | (비트단위 or 연산자)
	// 비교하는 두 비트 중 하나라도 1이면 결과는 1, 둘다 0이면 결과는 0.
	// short a = 10;	// 0000 0000 0000 1010
	// short b = 6;		// 0000 0000 0000 0110
	// ---------------------------------------
	// short c = a | b;	// 0000 0000 0000 1110

	// cout << a|b << endl;

    // ~ (비트단위 not 연산자)
	// short a = 1;	// 0000 0000 0000 0001
	// a = ~a;
	// cout << a << endl; // 1111 1111 1111 1110 (1의 보수)
	// 
	// a += 1;			//2의 보수
	// cout << a << endl;


    // ^ (비트단위 xor 연산자)
	// short a = 10;	// 0000 0000 0000 1010
	// short b = 6;		// 0000 0000 0000 0110

	// short c = a ^ b	// 0000 0000 0000 1100
	// cout << c << endl;


	// ***** 비트 연산 활용
	// short 공속 = 0x0001; // 0000 0000 0000 0001
	// short 이속 = 0x0002; // 0000 0000 0000 0010
	// short 물방 = 0x0004; // 0000 0000 0000 0100
	// short 마방 = 0x0008; // 0000 0000 0000 1000

	// 플레이어_버프 = 0000 0000 0000 0101
	// short 플레이어_버프 = 공속 | 물방;
	// 
	// cout << (플레이어_버프 & 공속) << endl;	 //	참
	// cout << (플레이어_버프 & 이속) << endl;	 //	거짓
	// cout << (플레이어_버프 & 물방) << endl;	 //	참
	// cout << (플레이어_버프 & 마방) << endl;	 //	거짓

	// 플레이어_버프 = 0000 0000 0000 0101
	// 공속			 = 0000 0000 0000 0001
	// 플레이어_버프 = 플레이어_버프 ^ 공속;


	// ##3. 비트단위 시프트 연산자 (좌측 시프트 연산자, 우측 시프트 연산자)
	// 정수 자료형에만 사용할 수 있는 연산자다.

	// << (좌측 시프트 연산자)
	// 현재 정수가 갖고 있는 모든 비트열을 왼쪽으로 이동.

	short a = 1;	  // 0000 0000 0000 0001

	// a가 갖고 있는 모든 비트열을 왼쪽으로 3칸 이동해라.
	short b = a << 3; // 0000 0000 0000 1000
	// X << N ==> X * 2의 N승

	// >> (우측 시프트 연산자)
	short c = b >> 3; // 0000 0000 0000 0001
	// X >> N ==> X / 2의 N승

	return;
}